// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	models "git.garena.com/bootcamp/batch-02/shared-projects/product-api.git/models"
	mock "github.com/stretchr/testify/mock"
)

// ProductRepository is an autogenerated mock type for the ProductRepository type
type ProductRepository struct {
	mock.Mock
}

// DeleteAllProducts provides a mock function with given fields:
func (_m *ProductRepository) DeleteAllProducts() {
	_m.Called()
}

// DeleteProductById provides a mock function with given fields: id
func (_m *ProductRepository) DeleteProductById(id uint) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Find provides a mock function with given fields:
func (_m *ProductRepository) Find() ([]models.Product, error) {
	ret := _m.Called()

	var r0 []models.Product
	if rf, ok := ret.Get(0).(func() []models.Product); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Product)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProductById provides a mock function with given fields: id
func (_m *ProductRepository) GetProductById(id uint) (*models.Product, error) {
	ret := _m.Called(id)

	var r0 *models.Product
	if rf, ok := ret.Get(0).(func(uint) *models.Product); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Product)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: product
func (_m *ProductRepository) Save(product *models.Product) (*models.Product, error) {
	ret := _m.Called(product)

	var r0 *models.Product
	if rf, ok := ret.Get(0).(func(*models.Product) *models.Product); ok {
		r0 = rf(product)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Product)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*models.Product) error); ok {
		r1 = rf(product)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateProductById provides a mock function with given fields: id, product
func (_m *ProductRepository) UpdateProductById(id uint, product *models.Product) (*models.Product, error) {
	ret := _m.Called(id, product)

	var r0 *models.Product
	if rf, ok := ret.Get(0).(func(uint, *models.Product) *models.Product); ok {
		r0 = rf(id, product)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Product)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, *models.Product) error); ok {
		r1 = rf(id, product)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewProductRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewProductRepository creates a new instance of ProductRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewProductRepository(t mockConstructorTestingTNewProductRepository) *ProductRepository {
	mock := &ProductRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
